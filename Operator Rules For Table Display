def binary_to_expression(binary):
    # Handle trailing zeros
    binary = binary.rstrip('0')

    # If the binary is empty after removing trailing zeros, return NaN
    if not binary:
        return float('NaN'), "NaN"

    # If the binary doesn't contain '1', return the number itself
    if '1' not in binary:
        return binary, binary

    # Initialize the result and expression with the first number
    result = 1  # The first '1' always represents the number 1
    expression = "1"

    # Iterate over the rest of the binary
    for i in range(1, len(binary)):
        # If the current digit is '1'
        if binary[i] == '1':
            # Count the number of zeros since the last '1'
            zeros = binary[i-1::-1].index('1') if '1' in binary[i-1::-1] else i

            # If the number of zeros is odd, subtract the current number
            if zeros % 2 == 1:
                result -= 1
                expression += " - 1"
            # If the number of zeros is even, add the current number
            else:
                result += 1
                expression += " + 1"

    # Convert the result to binary
    if result < 0:
        result = '-0b' + bin(abs(result))[2:]
    else:
        result = bin(result)[2:]

    return result, expression

def fib(n):
    # Return the n-th Fibonacci number
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a

# List of the first n Fibonacci numbers in binary format
binaries = [bin(fib(n))[2:] for n in range(1, 1000)]

# Print the table header
print(f'{"n":<10} {"f(n)":<20} {"Result"}')

# Iterate over the binary numbers
for binary in binaries:
    # Calculate the result and the expression
    result, expression = binary_to_expression(binary)

    # Print the binary number, the expression, and the result
    print(f'{binary:<10} {expression:<20} {result}')
